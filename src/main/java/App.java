
import java.io.File;
import java.util.ArrayList;
import java.util.regex.Pattern;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;

import de.lindow_it.obiee.rtf.model.RtfConfiguration;
import de.lindow_it.obiee.rtf.model.RtfVariable;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
	private static final Pattern docvarRtfPattern = Pattern.compile("\\{(.){0,}\\\\docvar\\{(.){1,}\\}(.){0,}\\{(.){1,}\\}");
	
    public static void main(String[] args) {
    	RtfConfiguration configuration = new RtfConfiguration();
    	configuration.setRtfFileName("test.rtf");
    	configuration.getVariables().put("test", "test");
    	configuration.getVariables().put("tester", "${test} + ${test}");
    	
    	try {
    		System.err.println(configuration.getVariableValue("tester"));
    		
	        JAXBContext context = JAXBContext.newInstance(RtfConfiguration.class);
	        Marshaller m = context.createMarshaller();
	        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
	        
	        m.marshal(configuration, System.out);
    	} catch (Exception ex) {
    		ex.printStackTrace();
    	}
    }
    
    
    /**
     * This method parses the provided rtfFile and returns a configuration file that contains all
     * available doc var elements.
     * @param rtfFile
     * @return
     */
    public RtfConfiguration generateNewRtfConfiguration(File rtfFile) throws Exception {
    	if(rtfFile == null || !rtfFile.exists()) {
    		throw new Exception("No file was provided");
    	}
    	
    	
    	
    	
    	RtfConfiguration configuration = new RtfConfiguration();
    	configuration.setRtfFileName( rtfFile.getName());
    	return configuration;
    }
    
    /**
     * This method can be used to update an existing rtf configuration. This is useful for new fields, that are available in
     * the rtf file itself but not in the rtf configuration.
     * @param rtfConfiguration
     * @param rftFile
     * @return
     */
    public RtfConfiguration regenerateRtfConfiguration(File rtfConfiguration, File rtfFile) {
    	return null;
    }
    
    /**
     * This method uses the rtf configuration to retrieve the plain variable values and stores them in the docvar elements of the provided
     * rtfFile.
     * @return
     */
    public File commuteFinalRtf(File rtfConfiguration, File rtfFile) {
    	return null;
    }
}
